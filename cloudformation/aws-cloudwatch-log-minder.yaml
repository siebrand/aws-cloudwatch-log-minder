---
AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  LambdaS3Bucket:
    Type: String
    Default: ''
  CFNCustomProviderZipFileName:
    Type: String
    Default: lambdas/aws-cloudwatch-log-minder-0.5.1.zip
  LogRetentionInDays:
    Description: 'to apply to log groups without retention'
    Type: Number
    Default: 30
    MinValue: 1

Conditions:
  UsePublicBucket: !Equals
    - !Ref 'LambdaS3Bucket'
    - ''

Resources:
  Policy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
            - logs:DescribeLogGroups
            - logs:DescribeLogStreams
            - logs:PutRetentionPolicy
            - logs:DeleteLogStream
            - logs:GetLogStream
            - logs:GetLogEvents
          Resource: "*"
        - Effect: Allow
          Action:
            - lambda:InvokeFunction
          Resource:
            - !Sub 'arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:aws-cloudwatch-delete-empty-log-streams'

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
      - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - !Ref Policy
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole

  DeleteEmptyLogStreams:
    Type: AWS::Lambda::Function
    Properties:
      Description: Delete empty log streams older than retention period
      FunctionName: aws-cloudwatch-delete-empty-log-streams
      Code:
        S3Bucket: !If
          - UsePublicBucket
          - !Sub 'binxio-public-${AWS::Region}'
          - !Ref 'LambdaS3Bucket'
        S3Key: !Ref 'CFNCustomProviderZipFileName'
      Handler: aws_cloudwatch_log_minder.delete_empty_log_streams.handle
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.7
      Timeout: 900

  SetLogRetention:
    Type: AWS::Lambda::Function
    Properties:
      Description: set default log retention period to groups without one
      FunctionName: aws-cloudwatch-set-log-retention
      Code:
        S3Bucket: !If
          - UsePublicBucket
          - !Sub 'binxio-public-${AWS::Region}'
          - !Ref 'LambdaS3Bucket'
        S3Key: !Ref 'CFNCustomProviderZipFileName'
      Handler: aws_cloudwatch_log_minder.set_log_retention.handle
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.7
      Timeout: 900
      Environment:
        Variables:
          DEFAULT_LOG_RETENTION_IN_DAYS: !Ref 'LogRetentionInDays'

  DeleteEmptyLogStreamsSchedulePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt DeleteEmptyLogStreams.Arn
      Principal: events.amazonaws.com

  SetLogRetentionSchedulePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt SetLogRetention.Arn
      Principal: events.amazonaws.com

  SetLogRetentionSchedule:
    Type: AWS::Events::Rule
    Properties:
      Name: aws-cloudwatch-set-log-retention
      Description: set log retention on log streams
      ScheduleExpression: 'cron(0 3 * * ? *)'
      State: ENABLED
      Targets:
        - Id: aws-cloudwatch-set-log-retention
          Arn: !GetAtt SetLogRetention.Arn
          Input: '{"dry_run": false}'

  DeleteEmptyLogStreamsSchedule:
    Type: AWS::Events::Rule
    Properties:
      Name: aws-cloudwatch-delete-empty-log-streams
      Description: delete empty log streams
      ScheduleExpression: 'cron(10 3 * * ? *)'
      State: ENABLED
      Targets:
        - Id: aws-cloudwatch-delete-empty-log-streams
          Arn: !GetAtt DeleteEmptyLogStreams.Arn
          Input: '{"dry_run": false}'
